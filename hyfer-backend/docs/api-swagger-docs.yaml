swagger: "2.0"
info:
  version: "0.1.0"
  title: Hyfer API
  contact:
    email: info@hackyourfuture.net
host: localhost:3005
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: modules
    description: Modules definitions (standard curriculum and optional)
  - name: groups
    description: Groups definitions 
  - name: timeline
    description: Timeline definitions 
  - name: homework
    description: Homework definitions 
  - name: users
    description: Users definitions 
  # - name: Runing modules
  #   description: Users definitions 
parameters:
  authHeaderParam:
    in: header
    name: Authorization
    description: '`Bearer xxxx`'
    required: true
    type: string
paths:
  /modules:
    parameters:
      - $ref: '#/parameters/authHeaderParam'
    get:
      summary: Get list of modules
      tags:
        - modules
      description: |
        Get a list of module definitions.
        Requires a `user` or `teacher` role.
      operationId: getModules
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Module"
    post:
      summary: 'Create a new module (v2: REMOVE)'
      tags:
        - modules
      description: |
        Requires a `teacher` role.
        Is this end point actually used? See PATCH /modules
      deprecated: true
      parameters:
        - in: body
          name: module
          description: The module to create
          schema:
              $ref: "#/definitions/ModuleInput"
      responses:
        200:
          description: OK
    patch:
      summary: Sync (create, update, delete) the list of modules.
      tags:
        - modules
      description: Requires a `teacher` role.
      parameters:
        - in: body
          name: module
          description: The module to create
          schema:
            type: array
            items:  
              $ref: "#/definitions/ModuleInput"
      responses:
        200:
          description: OK
  /modules/{id}:
    patch:
      summary: 'Update an existing module. (v2: REMOVE)'
      tags:
        - modules
      description: Requires a `teacher` role.
      deprecated: true
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: path
          name: id
          type: integer
          description: id of the module to update.
          required: true
        - in: body
          name: module
          description: The module to create
          schema:
              $ref: "#/definitions/ModuleInput"
      responses:
        200:
          description: OK
    delete:
      summary: 'Delete an existing module'
      tags:
        - modules
      description: Requires a `teacher` role.
      operationId: DeleteModule
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: path
          name: id
          type: integer
          description: id of the module to Delete.
          required: true
        - in: body
          name: module
          description: The module to delete
          schema:
              $ref: "#/definitions/Module"
      responses:
        200:
          description: OK
  /modules/homework:
    parameters:
      - $ref: '#/parameters/authHeaderParam'
    get:
      summary: Get list of homework
      tags:
        - modules
      description: |
        Get a list of homework definitions.
        Requires a `user` or `teacher` role.
      operationId: getHomeworkModules
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/homework"
  /groups:
    parameters:
      - $ref: '#/parameters/authHeaderParam'
    get:
      summary: Get list of groups
      tags:
        - groups
      description: |
        Get a list of groups definitions.
      operationId: getGroups
      responses:
        200:
          description: list of the groups
          schema:
            type: array
            items:
              $ref: "#/definitions/groups"
    post:
      summary: 'Create a new group'
      tags:
        - groups
      description: |
        Requires a `teacher` role.
      parameters:
        - in: body
          name: group
          description: The group to create
          schema:
              $ref: "#/definitions/GroupsInput"
      responses:
        201:
          description: Created
  /groups/{id}:
    patch:
      summary: Update an existing group. 
      tags:
        - groups
      description: Requires a `teacher` role.
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: path
          name: id
          type: integer
          description: id of the group to update.
          required: true
        - in: body
          name: module
          description: The group to create
          schema:
              $ref: "#/definitions/GroupArchiveInput"
      responses:
        204:
          description: successful
    delete:
      summary: Delete an existing group ( V2 REMOVE )
      tags:
        - groups
      description: Requires a `teacher` role.
      operationId: deleteGroup
      deprecated: true
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: path
          name: id
          type: integer
          description: id of the group to Delete.
          required: true
          schema:
              $ref: "#/definitions/groups"
      responses:
        200:
          description: OK
  /timeline:
    parameters:
      - $ref: '#/parameters/authHeaderParam'
    get:
      summary: Get list of modules
      tags:
        - timeline
      description: |
        Get a list of module definitions.
        Requires a `user` or `teacher` role.
      operationId: getTimelineItems
      responses:
        200:
          description: OK
          schema:
            type: object
            items:
              $ref: "#/definitions/Timeline"
  /homework/students/{groupId}:
    get:
      summary: Get list of students 
      tags:
        - homework
      description: |
        Get a list of `students(group)` who are working on the homework that has been assigned to them .
        Requires a `user` or `teacher` role.
      operationId: getStudents
      parameters:
      - $ref: '#/parameters/authHeaderParam'
      - in: path
        name: groupId
        type: integer
        description: id of the group.
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/StudentHomework"
  /homework/assignments/{groupId}:
    get:
      summary: Get list of homework
      tags:
        - homework
      description: |
        Get all assignments for specific group of students.
        Requires a `user` or `teacher` role.
      operationId: "addAssignment"
      parameters:
      - $ref: '#/parameters/authHeaderParam'
      - in: path
        name: groupId
        type: integer
        description: id of the group.
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/GroupAssignments"
  /homework/submissions/{groupId}:
    get:
      summary: Get list of submissions
      tags:
        - homework
      description: |
        Get all the submissions that have been made by student with the groupId.
        Requires a `user` or `teacher` role.
      operationId: ""
      parameters:
      - $ref: '#/parameters/authHeaderParam'
      - in: path
        name: groupId
        type: integer
        description: id of the group .
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Submissions"
              
  /homework/submitters/{assignmentId}:
    get:
      summary: Get list of submitters
      tags:
        - homework
      description: |
        Get a list of assignments for specific group.
        Requires a `user` or `teacher` role.
      operationId: ""
      parameters:
      - $ref: '#/parameters/authHeaderParam'
      - in: path
        name: assignmentId
        type: integer
        description: id of the assignment to get.
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AssignmentsSubmitters"
  
  /homework/reviews/{groupId}:
    get:
      summary: Get list of reviews
      tags:
        - homework
      description: |
        Get a list of reviews by the group Id.
        Requires a `user` or `teacher` role.
      operationId: ""
      parameters:
      - $ref: '#/parameters/authHeaderParam'
      - in: path
        name: groupId
        type: integer
        description: id of the group to get.
        required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Reviews"  
  /homework/assignments:
    post:
      summary: 'Create a new assignment'
      tags:
        - homework
      description: |
        add new assignment.
        Requires a `user` or `teacher` role.
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: body
          name: Assignment
          description: The assignment to create
          required: true
          schema:
              $ref: "#/definitions/AssignmentInput"
      responses:
        200:
          description: OK
  /homework/submissions:
    post:
      summary: 'Create a new submission'
      tags:
        - homework
      description: |
        add new submission.
        Requires a `user` or `teacher` role.
      operationId: addSubmission
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: body
          name: submission
          description: The submissions to create
          required: true
          schema:
              $ref: "#/definitions/SubmissionInput"
      responses:
        200:
          description: OK
  /homework/reviews:
    post:
      summary: 'Create a new review'
      tags:
        - homework
      description: |
        add new review.
        Requires a `user` or `teacher` role.
      operationId: ""
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: body
          name: review
          description: The review to create
          required: true
          schema:
              $ref: "#/definitions/ReviewsInput"
      responses:
        200:
          description: OK
  /homework/addReviewer:
    patch:
      summary: 'Assign a Reviewer'
      tags:
        - homework
      description: |
        add new Reviewer.
        Requires a `teacher` role.
      operationId: ""
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: body
          name: review
          description: The Reviewer to Assign
          required: true
          schema:
              $ref: "#/definitions/ReviewerInput"
      responses:
        200:
          description: OK
  /user/:
    parameters:
      - $ref: '#/parameters/authHeaderParam'
    get:
      summary: Gets CurrentUser
      tags:
        - users
      description: 
        Get CurrentUser definition.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/CurrentUser"
  /user/all/:
    parameters:
      - $ref: '#/parameters/authHeaderParam'
    get:
      summary: Gets all users
      tags:
        - users
      description: |
        Get all users definitions.
        Requires a `teacher` role.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/CurrentUser" 
  /user/{id}:
    get:
      tags:
        - users
      summary: Gets a user by ID.
      description: |
        get user by his/her **ID**.
        Requires a `user` or `teacher` role.
       
      operationId: getUserById
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/CurrentUser'
    patch:
      summary: 'update user'
      tags:
        - users
      description: |
        Update user by his/her **ID**.
        Requires a `user` or `teacher` role.
      operationId: ""
      parameters:
        - $ref: '#/parameters/authHeaderParam'
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - in: body
          name: review
          description: The user information to update
          required: true
          schema:
              $ref: "#/definitions/UserInput"
      responses:
        200:
          description: OK
  # /running-module/{groupId}:
  #   get:
  #     tags:
  #       - Runing modules
  #     summary: Gets a user by ID.
      # description: |
      #   get user by his/her **ID**.
      #   Requires a `user` or `teacher` role.
       
      # operationId: getUserById
      # parameters:
      #   - $ref: '#/parameters/authHeaderParam'
      #   - in: path
      #     name: id
      #     description: User ID
      #     required: true
      #     schema:
      #       type: integer
      #       format: int64
      # responses:
      #   '200':
      #     description: Successful operation
      #     schema:
      #       type: array
      #       items:
      #         $ref: '#/definitions/CurrentUser'
definitions:
  ModuleInput:
    type: object
    properties:
      module_name:
        type: string
        description: The name of the module.
      default_duration:
        type: integer
        format: int32
      git_url:
        type: string
        format: url
        description: 'v2: combine with git_repo to make this a full URL.'
      git_repo:
        type: string
        description: 'v2: add to `git_url` and remove this field.'
      color:
        type: string
      optional:
        type: integer
        format: int8
        description: 'v2: convert to boolean.'
    required:
      - module_name
  Module:
    type: object
    required:
      - module_name
    properties:
      id:
        type: integer
        format: int32
      module_name:
        type: string
        description: The name of the module.
      display_name:
        type: string
        description: 'v2: Unused in new frontend: REMOVE.'
      added_on:
        type: string
        format: date-time
      default_duration:
        type: integer
        format: int32
      git_url:
        type: string
        format: url
        description: 'v2: combine with git_repo to make this a full URL.'
      git_owner:
        type: string
        description: 'v2: this field is unused, remove it.'
      git_repo:
        type: string
        description: 'v2: add to `git_url` and remove this field.'
      color:
        type: string
      optional:
        type: integer
        format: int8
        description: 'v2: convert to boolean.'
      ref_count:
        type: integer
        format: int64
        description: Number of references to this module (computed field).
    example:
      id: 5
      module_name: JavaScript 3
      display_name: ''
      added_on: '2017-02-28T17:26:49.000Z'
      default_duration: 3
      git_url: https://github.com/HackYourFuture/
      git_owner: HackYourFuture
      git_repo: JavaScript
      color: "#F8A055"
      optional: 0
      ref_count: 15
  homework:
    type: object
    properties:
      id:
        type: integer
        format: int32 
      name:
        type: string
      duration : 
        type: integer
        format: int32
      sort_order:
        type: integer
        format: int32
      git_url:
        type: string
        format: url
  groups:
    type: object
    properties:
      id:
        type: integer
        format: int32
      group_name:
        type: string
      starting_date:
        type: string
      archived:
        type: integer
        format: int32
    example:
      id: 45
      group_name: Class 7
      starting_date: '2016-11-05T23:00:00.000Z'
      archived: 1
  GroupsInput:
    type: object
    properties:
      group_name:
        type: string
      starting_date:
        type: string
      archied: 
        type: integer
        format: int32
  GroupArchiveInput:
    type: object
    properties:
      group_name:
        type: string
      archived: 
        type: integer
        format: int32
  Timeline:
    type: object
    properties:
      "class(Number) : ":
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              format: int32
            group_name:
              type: string
            starting_date:
              type: string
              format: date-time
            duration:
              type: integer
              format: int32
            running_module_id:
              type: integer
              format: int64
            position:
              type: integer
              format: int32
            module_name: 
              type: string
            display_name:
              type: string
            color:
              type: string
            git_url:
              type: string
            git_repo:
              type: string
            optional:
              type: integer
              format: int32
  StudentHomework:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username: 
        type: string
      full_name:
        type: string
      email:
        type: string
    example:
      id: 40
      username: ekhamis
      full_name: Eyad Khamis
      email: ekhamis@gmail.com
  GroupAssignments:
    type: object
    properties:
      id:
        type: integer
        format: int64
      module_name: 
        type: string
      title:
        type: string
      assignment_link:
        type: string
      deadline:
        type: string
        format: date-time
  AssignmentInput:
    type: object
    properties:
      group_id:
        type: integer
        format: int64
      module_id: 
        type: integer
        format: int32
      title:
        type: string
      assignment_link:
        type: string
      deadline:
        type: string
        format: date-time
  SubmissionInput:
    type: object
    properties:
      assignment_id:
        type: integer
        format: int32
      submitter_id:
        type: integer
        format: int32
      github_link:
        type: string
      date:
        type: string
        format: date-time
  ReviewsInput:
    type: object
    properties:
      submission_id:
        type: integer
        format: int32
      reviewer_id:
        type: integer
        format: int32
      comments:
        type: string
      date:
        type: string
        format: date-time
  ReviewerInput:
    type: object
    properties:
      reviewer:
        type: string
      submission_id:
        type: integer
        format: int32
  AssignmentsSubmitters:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      full_name:
        type: string
  Reviews:
    type: object
    properties:
      id:
        type: integer
        format: int32
      submission_id:
        type: integer
        format: int32
      reviewer_id:
        type: integer
        format: int32
      submitter_id:
        type: integer
        format: int32
      comments:
        type: string
      data:
        type: string
        format: date-time
    example:
      id: 2
      submission_id: 1
      reviewer_id: 0
      submitter_id: 45
      comments: "test "
      date: "2020-06-21T22:00:00.000Z"
  Submissions:
    type: object
    properties:
      id:
        type: integer
        format: int32
      assignment_id:
        type: integer
        format: int32
      submitter_name:
        type: string
      github_link:
        type: string
      date:
        type: string
        format: data-time
      reviewer:
        type: string  
  CurrentUser:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      full_name:
        type: string
      role:
        type: string
      register_date:
        type: string
        format: date-time
      slack_username:
        type: string
      freecodecamp_username:
        type: string 
      email:
        type: string
      mobile:
        type: string
      group_id:
        type: integer
        format: int64
      group_name:
        type: string
      archived:
        type: integer
        format: int32
      starting_date:
        type: string
  UserInput:
    type: object
    properties:
      full_name:
        type: string
      role:
        type: string
      slack_username:
        type: string
      freecodecamp_username:
        type: string 
      email:
        type: string